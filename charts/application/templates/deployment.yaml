apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "application.fullname" . }}
  annotations:
    {{- include "application.annotations" . | nindent 4 }}
  labels:
    {{- include "application.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "application.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "application.annotations" . | nindent 8 }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "application.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "application.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "application.fullname" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default "latest" }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.service.port }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.env.data }}
          env:
            {{- range $key, $value := .Values.env.data }}
            - name: {{ $key }}
              value: {{ printf "'%s'" $value }}
            {{- end }}
          {{- end }}
          {{- if .Values.env.secret }}
          envFrom:
            - secretRef:
                name: {{ include "application.fullname" . }}
          {{- end }}
          {{- with .Values.healthcheck }}
          {{- if .enabled }}
          livenessProbe:
            {{- if .livenessProbe }}
            {{- if .livenessProbe.tcpSocket }}
            tcpSocket:
              port: http
            {{- else if .livenessProbe.httpGet }}
            httpGet:
              port: {{ .livenessProbe.httpGet.port | default "http" }}
              path: {{ .livenessProbe.httpGet.path }}
              scheme: {{ .livenessProbe.httpGet.scheme | default "HTTP" }}
            {{- end }}
            {{- else }}
            tcpSocket:
              port: http
            {{- end }}
            initialDelaySeconds: {{ .livenessProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .livenessProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .livenessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .livenessProbe.failureThreshold | default 3 }}
          readinessProbe:
            {{- if .readinessProbe }}
            {{- if .readinessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .readinessProbe.tcpSocket.port | default "http" }}
            {{- else if .readinessProbe.httpGet }}
            httpGet:
              port: {{ .readinessProbe.httpGet.port | default "http" }}
              path: {{ .readinessProbe.httpGet.path }}
              scheme: {{ .readinessProbe.httpGet.scheme | default "HTTP" }}
            {{- end}}
            {{- else}}
            tcpSocket:
              port: http
            {{- end }}
            initialDelaySeconds: {{ .readinessProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readinessProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .readinessProbe.failureThreshold | default 3 }}
          startupProbe:
            {{- if .startupProbe }}
            {{- if .startupProbe.tcpSocket }}
            tcpSocket:
              port: {{ .startupProbe.tcpSocket.port | default "http" }}
            {{- else if .startupProbe.httpGet }}
            httpGet:
              port: {{ .startupProbe.httpGet.port | default "http" }}
              path: {{ .startupProbe.httpGet.path }}
              scheme: {{ .startupProbe.httpGet.scheme | default "HTTP" }}
            {{- end }}
            {{- else }}
            tcpSocket:
              port: http
            {{- end }}
            initialDelaySeconds: {{ .startupProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .startupProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .startupProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .startupProbe.successThreshold | default 1 }}
            failureThreshold: {{ .startupProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
